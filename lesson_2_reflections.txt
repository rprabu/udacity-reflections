-- What happens when you initialize a repository? Why do you need to do it?

A .git directory is created in the directory git init is run in. Doing this helps us initialize or set the platform for using git power.


-- How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area is a part of Git. It keeps objects that are tracked in the working directory. Files in the staging area are not in the repository yet. It is a temporary place to record/track changes made.


-- How can you use the staging area to make sure you have one commit per logical change?

Run a git diff --staged to see change in staged version versus repository version. Compare that with the the working directory version. Depending on these comparisons make a decision of what a logical change unit is and make the commmit accordingly. Note that we do not have a way, via git diff, to compare working directory version and repository version. 

-- What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When trying out an experimental feature while still having the capability to rollback to the "main" version. This way if the experimental feature is successful we can merge it with the main branch. If the feature is not successful we can just checkout the main branch and continue with it.


-- How do the diagrams help you visualize the branch structure?

They help us keep track of reachability and hence alert us to the possibility if stray commits.  


-- What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The specified branches are merged into the current branch. The merged branch will have as its parents the branches participating in the merge. Specifically pointers to the final commits/tips of the participating branches are maintained. We want to access all the commits in the branches and hence this representation.

-- What are the pros and cons of Gitâ€™s automatic merging vs. always 
doing merges manually?

Automatic merging does not have contextual information. Always merging manually incorporates contextual information everytime but the user has to spend more time to validate all pieces of the merges. With some automation Git helps focus the user to relevant areas that require resolution. 




